import { useQueryState as useQueryStateOrg } from './useQueryState/useQueryState';
import { Reducer, ReducerState } from './types/sharedTypes';
import { QueryStateOpts } from './useQueryState/useQueryState.types';
import { GetServerSideProps } from 'next';
export * from './useLocationState/useLocationState';
export declare const useQueryState: typeof useQueryStateOrg;
export declare function useQueryReducer<R extends Reducer<any, any>>(itemName: string, reducer: R, initialState: ReducerState<R>, queryStateOpts?: QueryStateOpts): [ReducerState<R>, import("./useQueryState/useQueryReducer").QueryDispatch<import("./types/sharedTypes").ReducerAction<R>>];
/**
 * Empty getServerSideProps to trigger server-side rendering and give router access to query. (static rendered pages may not rely on query)
 * This fixes hydration warnings e.g. Warning: Text content did not match. Server: "xzy" Client: "abc"
 */
export declare const getServerSideProps: GetServerSideProps;
